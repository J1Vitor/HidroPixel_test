# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HidroPixel
                                 A QGIS plugin
 This is just a test"
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-11-29
        git sha              : $Format:%H$
        copyright            : (C) 2023 by João Vitor & Adriano Rolim
        email                : jvds@academico.ufpb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .hidroPixel_dialog import HidroPixelDialog
from .modulos_files import global_variables,RDC_variables
import os.path
import sys, os
from osgeo import ogr

# Importing libs
import numpy as np


class HidroPixel:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HidroPixel_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&HidroPixel')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HidroPixel', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/hidroPixel/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'HidroPixel Plugin'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&HidroPixel'),
                action)
            self.iface.removeToolBarIcon(action)


    def carregaArquivos(self):
        """Esta função é utilizada para adicionar layers no projeto"""
        self.abrir_arquivo = str(QFileDialog.getOpenFileName(caption="Escolha os arquivos referentes a ...!", filter="Raster ou Texto(.txt, .RST)")[0])
        
    def leh_bacia(self):
        """Esta função é utilizada para ler as informações da bacia hidrográfica (arquivo .rst)"""
        # Redimensionando a matriz bacia, para as dimensões: número de linahas e número de colunas
        global_variables.bacia.shape = (RDC_variables.nlin, RDC_variables.ncol)

        # Abrindo o arquivo fornecido com as as características da bacia
        with open(self.abrir_arquivo, 'rb') as arquivo_bin:
            self.dados_lidos_bacia = np.fromfile(arquivo_bin, dtype = int, count = -1)
        
            # Reorganizando os dados lidos da bacia em uma nova matriz 2D
            global_variables.bacia = np.reshape(self.dados_lidos_bacia, (len(self.dados_lidos_bacia)//RDC_variables.ncol,RDC_variables.ncol))

        return global_variables.bacia
    
    def leh_caracteristica_dRios(self):
        """Esta função é utilizada para ler as informações acerca da característica dos rios de uma bacia hidrográfica (texto .rst)"""

        # Abrindo o arquivo de texto (.txt) com as informações acerca das classes dos rios
        with open(self.abrir_arquivo, 'r') as arquivo_txt:
            arquivo_txt.readlines()
            global_variables.nclasses = arquivo_txt.readlines()# com base no arquivo fornecido, o numéro de classes está na segunda linha!! (X)

        #  Atualizando as variáveis que dependen    
        global_variables.Sclasse.rezise(global_variables.nclasses)
        global_variables.Mannclasse.int(global_variables.nclasses)
        global_variables.Rhclasse.int(global_variables.nclasses)

        # Descartando a linha que possui o cabeçalho (id,declividade...) das colunas no arquivo txt
        next(arquivo_txt)

        # Armazenando os valores  das colunas (id, S, Mann, Rh) nas suas respectivas variáveis (vetores de dimensão nclasses)
        for i in range(1, global_variables.nclasse + 1):
            lines = arquivo_txt.readline().split()
            global_variables.j,global_variables.Sclasse[i], global_variables.Mannclasse[i], global_variables.Rhclasse[i] = map(float,lines)

        return global_variables.Sclasse, global_variables.Mannclasse, global_variables.Rhclasse
    

    def leh_chasses_rios(self):
        """Esta função é utilizada para ler as informações acerca da classe dos rios da bacia hidrográfica (arquivo raster -  .rst)"""
        # Redimensionando a matriz da classe dos rios para as dimensões: número de linhas e número de colunas
        global_variables.classerio.shape = (RDC_variables.nlin, RDC_variables.ncol)

        # abrindo o arquivo fornecido com as características das classes dos rios
        with open(self.abrir_arquivo, 'rb') as arquivo_bin:
            self.dados_lidos_classe_rio = np.fromfile(arquivo_bin, dtype = int, count = -1)
        
        global_variables.classerio = np.reshape(self.dados_lidos_classe_rio, (len(self.dados_lidos_classe_rio)//RDC_variables.ncol,RDC_variables.ncol))

        return global_variables.classerio
    
    def leh_direcao_rios(self):
        """Esta função é utilizada para ler as informações acerca da direção de escoamento dos rios (arquivo raster - .rst)"""
        # será desenvolvida...
        return

    def leh_drenagem(self):
        """Esta função é utilizada para ler as informações acerca da drenagem dos rios (arquivo raster - .rst)"""
        # Redimensionando a matriz da drenagem para as dimensões: número de linhas e número de colunas
        global_variables.dren.shape = (RDC_variables.nlin, RDC_variables.ncol)

        # Abrindo o arquivo fornecido com as características referentes a drenagem (sistema de drenagem?) da bacia
        with open(self.abrir_arquivo, 'rb') as arquivo_bin:
            self.dados_lidos_drenagem = np.fromfile(arquivo_bin, dtype = int, count = -1)

        # Redimensionando a matriz da drenagem com base nos dados lidos do arquivo fornecido
        global_variables.dren = np.reshape(self.dados_lidos_drenagem, (len(self.dados_lidos_drenagem)//RDC_variables.ncol,RDC_variables.ncol))

        return global_variables.dren

    def leh_modelo_numerico_dTerreno(self):
        """Esta função é utilizada para ler as informações acerca do modelo numérico do terreno (arquivo raster - .rst)"""
        # Redimensionando as matrizes referentes ao MDE e MDEReal para as dimensões: número de linhas e número de colunas
        global_variables.MDE.shape = (RDC_variables.nlin, RDC_variables.ncol)
        global_variables.MDEreal.shape = (RDC_variables.nlin, RDC_variables.ncol)

        # Abrindo o arquivo fornecido com as características acerca do modelo numérico do terreno (MNT)
        with open(self.abrir_arquivo, 'rb') as arquivo_bin:
            self.dados_lidos_MNT = np.fromfile(arquivo_bin, dtype = np.int32, count = -1)

        # Redimensionando a matriz da drenagem com base nos dados lidos do arquivo fornecido
        global_variables.MDEreal = np.reshape(self.dados_lidos_MNT, (len(self.dados_lidos_MNT)//RDC_variables.ncol,RDC_variables.ncol), order = 'F')

        # Atribuindo o valor da matriz MDE a partir da conversão dos valores da matriz MDEreal para float
        global_variables.MDE = global_variables.MDEreal.astype(float)

        # Resentando a matriz MDEreal
        global_variables.MDEreal = None

        return global_variables.MDE

    def leh_precipitacao_24h(self):
        """Esta função é utilizada para ler as informações acerca da precipitação das últimas 24horas, P24 (arquivo texto - .txt)"""
        # lendo os arquivos acerda da precipitação das últimas 24 horas
        with open(self.abrir_arquivo, 'r') as arquivo_txt:
            self.dados_lidos_P24 = float(arquivo_txt.read()) # considerando que no arquivo só possui um valor de precipitação

        return self.dados_lidos_P24

    def leh_uso_do_solo(self):
        """Esta função é utilizada para ler as informações acerca do uso do solo (arquivo raster - .rst)"""
        # Redimensionando a matriz do uso do solo
        global_variables.usosolo.shape = (RDC_variables.nlin, RDC_variables.ncol)

        # Abrindo o arquivo fornecido com as características acerca do uso do solo
        with open(self.abrir_arquivo, 'rb') as arquivo_bin:
            self.dados_lidos_uso_solo = np.fromfile(arquivo_bin, dtype=int, count=-1)
        
        # Atualizando a matriz de uso do solo após a leitura dos dados fornecidos
        global_variables.usosolo = np.reshape(self.dados_lidos_uso_solo, (len(self.dados_lidos_uso_solo)//RDC_variables.ncol, RDC_variables.ncol), order='F')

        # 
        self.global_variables.nusomax = 0
        for l in range(1, RDC_variables.nlin + 1):
            for c in range(1, RDC_variables.ncol + 1):
                if global_variables.bacia[l, c] > 0:
                    if global_variables.usosolo[l, c] > self.global_variables.nusomax:
                        self.global_variables.nusomax = global_variables.usosolo[l, c]

        return self.global_variables.nusomax

    def leh_uso_manning (self):
        """Esta função é utilizada para ler as informações acerca do uso do solo e o coeficiente de rugosidade de Manning (arquivo texto - .txt)"""
        # Redimensionando a matriz do uso do solo para o coeficiente de Manning
        global_variables.Mann.shape = (self.global_variables.nusomax)

        # Abrindo o arquivo que contém o coeficiente de Manning para os diferentes usos do solo
        with open('relacao_uso_Manning.txt', 'r') as arquivo_txt:
        # Ignora a primeira linha, pois ela contém apenas o cabeçalho
            next(arquivo_txt)
        # Lê as informações de uso do solo e coeficiente de Manning para cada tt
        for global_variables.tt in range(1, global_variables.Nusomax + 1):
            line = next(arquivo_txt)
            global_variables.usaux, global_variables.Mann[global_variables.usaux - 1] = map(float, line.strip().split())

        return global_variables.Mann
    
    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = HidroPixelDialog()

        # show the dialog
        self.dlg.show()
        
        #Funções criadas
        self.dlg.toolButton.clicked.connect(self.carregaArquivos)
        
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code. I will
            pass